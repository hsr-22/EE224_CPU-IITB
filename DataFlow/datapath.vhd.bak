library ieee;
use ieee.std_logic_1164.all;

entity datapath is
	port( clk,reset: in std_logic;
			state: in std_logic_vector(3 downto 0));
end entity;

architecture path of datapath is

	entity Signed_Extender is
		generic (input_size: integer := 6);
		port (input: in std_logic_vector(input_size - 1 downto 0);
				output: out std_logic_vector(15 downto 0));
	end entity Signed_Extender;
	
	entity Register_N is
		generic (size: integer := 16);
		port (
				input         : in std_logic_vector(size - 1 downto 0);
				w_enable, clk : in std_logic;
				output        : out std_logic_vector(size - 1 downto 0)
				);
	end entity Register_N;
	
	entity Register_File is
		port (A1, A2, A3: in std_logic_vector(2 downto 0);
				D3: in std_logic_vector(15 downto 0);
				D1, D2: out std_logic_vector(15 downto 0);
				clk, w_enable: in std_logic);
	end entity Register_File;

	entity Left_Shifter is
		port (input : in std_logic_vector (7 downto 0);
				output : out std_logic_vector (15 downto 0));
	end entity Left_Shifter;

	entity Decoder_3_To_8 is
		 port (
			  I : in std_logic_vector(2 downto 0);
			  O : out std_logic_vector(7 downto 0));
	end entity;

	entity Decoder_2_To_4 is
		 port (
			  I : in std_logic_vector(1 downto 0);
			  O : out std_logic_vector(3 downto 0));
	end entity;

	entity Decoder_1_To_2 is
		 port (
			  I : in std_logic;
			  O : out std_logic_vector(1 downto 0));
	end entity;

	entity ALU is 
		port (A, B: in std_logic_vector(15 downto 0);
				opcode: in std_logic_vector(2 downto 0);
				C: out std_logic_vector(15 downto 0);
				z_flag: out std_logic);
	end entity ALU;
	
	begin
		